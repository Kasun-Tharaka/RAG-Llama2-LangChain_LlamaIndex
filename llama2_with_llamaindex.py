# -*- coding: utf-8 -*-
"""Llama2_with_llamaindex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QYev9f9msWdELWkeuzbsoMux0uSKw1tU

## RAG System Using Llama2 With Hugging Face
"""

#upload for all pdf
!pip install pypdf

#reason for bitsandbytes, most of LLM work with 64bit, but colab working with 4bit. use for contize 64 into 4
#transformers-> we can interact(make a pipeline) with huggingface
#accelerate use for accelerate loading and uploading pipeline
!pip install -q transformers einops accelerate langchain bitsandbytes

#Embedding
!pip install install sentence_transformers


!pip install llama_index

#VectorStoreIndex for indexing of all the pdf loaded
#ServiceContext helps to combine LLama2 model along with prompt template which we create
from llama_index import VectorStoreIndex,SimpleDirectoryReader,ServiceContext
#call LLama2 model through HuggingFace
from llama_index.llms import HuggingFaceLLM
from llama_index.prompts.prompts import SimpleInputPrompt

#load the all documents(pdfs)
documents=SimpleDirectoryReader("/content/data").load_data()
documents


system_prompt="""
You are a Q&A assistant. Your goal is to answer questions as
accurately as possible based on the instructions and context provided.
"""
#Default format supportable by LLama2(LLama2 requred specific format)
query_wrapper_prompt=SimpleInputPrompt("<|USER|>{query_str}<|ASSISTANT|>")

#HuggingFace loging
!huggingface-cli login

#call LLama2 model from HuggingFace itself. for that we can use torch
import torch

llm = HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs={"temperature": 0.0, "do_sample": False},
    system_prompt=system_prompt,
    query_wrapper_prompt=query_wrapper_prompt,
    tokenizer_name="meta-llama/Llama-2-7b-chat-hf",
    model_name="meta-llama/Llama-2-7b-chat-hf",
    device_map="auto",
    # uncomment this if using CUDA to reduce memory usage
	#contization happen here into 8bits
    model_kwargs={"torch_dtype": torch.float16 , "load_in_8bit":True}
)

#here start Embedding
from langchain.embeddings.huggingface import HuggingFaceEmbeddings
from llama_index import ServiceContext
from llama_index.embeddings import LangchainEmbedding

#this model is sentence transformer model which convert sentences and pharagraphs into 768 dimentional dense vector
embed_model=LangchainEmbedding(
    HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2"))

#now here we have LLama2 model, Embedding model and documents. then combine all these thing using ServiceContext
service_context=ServiceContext.from_defaults(
    chunk_size=1024,
    llm=llm,
    embed_model=embed_model
)

service_context

#convert our al data into Indexes using VectorStoreIndex
index=VectorStoreIndex.from_documents(documents,service_context=service_context)

index

#conver Index into query_engine. after convert into query_engine you can ask any questions
query_engine=index.as_query_engine()

response=query_engine.query("what is attention is all you need?")

print(response)

response=query_engine.query("what is YOLO?")

print(response)

